import 'package:flutter_bloc/flutter_bloc.dart';

class {{ class.name }} extends StatelessWidget {
  const { class.constructor }({
    super.key,
    required this.loading,
    required this.success,
    required this.error,
    this.onLoading,
    this.onSuccess,
    this.onError,
  });


  final Widget Function(BuildContext context, {{ states.loading }}) loading;
  final Widget Function(BuildContext context, {{ states.success }}) success;
  final Widget Function(BuildContext context, {{ states.error }}) error;

  final void Function(BuildContext context, {{ states.loading }})? onLoading;
  final void Function(BuildContext context, {{ states.success }})? onSuccess;
  final void Function(BuildContext context, {{ states.error }})? onError;

  @override
  Widget build(BuildContext context) {
    return  BlocConsumer<SubjectBloc, SubjectState>(
      listener: (context, state) {
        state.map(
          loading: (loading) => onLoading?.call(context, loading),
          success: (success) => onSuccess?.call(context, success),
          error: (error) => onError?.call(context, error),
        )
      },
      builder: (context, state) {
        return state.map(
          loading: loading,
          success: success,
          error: error,
        );
      },
    );
  }
}
