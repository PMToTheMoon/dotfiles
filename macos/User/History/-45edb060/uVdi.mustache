const _blocTemplate = '''
import 'package:bloc/bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part '{{ file_prefix }}_bloc.freezed.dart';
part '{{ file_prefix }}_state.dart';
part '{{ file_prefix }}_event.dart';

class {{ bloc_subject }}Bloc extends Bloc<{{ bloc_subject }}Event, {{ bloc_subject }}State> {
  {{ bloc_subject }}Bloc({
    required this.{{ source.name }},
  }) : super(const {{ bloc_subject }}Fetching()) {
    on<{{ bloc_subject }}FetchRequested>(_on{{ bloc_subject }}FetchRequested);
  }

  final {{ source.type }} {{ source.name }};

  Future<void> _on{{ bloc_subject }}FetchRequested(
    {{ bloc_subject }}FetchRequested event,
    Emitter emit,
  ) async {
    if (state is! {{ bloc_subject }}Fetching) {
      emit({{ bloc_subject }}Fetching());
      try {
        final data = await {{ source.name }}.{{ source.fetch_function }}();
        emit({{ bloc_subject }}Ready(data));
      } catch (e) {
        emit({{ bloc_subject }}Error());
      }
    }
  }
}
''';
